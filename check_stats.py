#!/usr/bin/env python

import requests
import json
import sys
from datetime import datetime, timedelta
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = "http://localhost:8000"

# –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo2LCJleHAiOjE3NDE5NjI0MjV9.NvmJjOM8WEvDmEypjglzPxUp6Se0jzh37aaqKglfOyM"

def check_time_status(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/time/status",
            headers={"Authorization": f"Bearer {token}"}
        )
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏: {response.status_code}")
            print(response.text)
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return None

def check_stats(token, start_date=None, end_date=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if not start_date:
        today = datetime.now()
        start_date = datetime(today.year, today.month, 1).strftime("%Y-%m-%d")
        
    if not end_date:
        end_date = datetime.now().strftime("%Y-%m-%d")
    
    print(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/stats/custom",
            params={"start_date": start_date, "end_date": end_date},
            headers={"Authorization": f"Bearer {token}"}
        )
        
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {response.url}")
        print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                print("\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
                print(f"- –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('total_duration', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')} (—Ç–∏–ø: {type(data.get('total_duration')).__name__})")
                print(f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ–Ω—å: {data.get('average_daily_hours', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')} (—Ç–∏–ø: {type(data.get('average_daily_hours')).__name__})")
                print(f"- –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è: {data.get('longest_session', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')} (—Ç–∏–ø: {type(data.get('longest_session')).__name__})")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if 'total_duration' in data and data['total_duration'] is not None:
                    total_seconds = float(data['total_duration'])
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    seconds = total_seconds % 60
                    print(f"- –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è): {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫.")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                daily_stats = data.get('daily_stats', {})
                print(f"- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(daily_stats)} –¥–Ω–µ–π")
                for date, duration in list(daily_stats.items())[:3]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è
                    print(f"  * {date}: {duration} (—Ç–∏–ø: {type(duration).__name__})")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    dur_seconds = float(duration) if isinstance(duration, (int, float, str)) else 0
                    dur_hours = dur_seconds // 3600
                    dur_minutes = (dur_seconds % 3600) // 60
                    dur_seconds = dur_seconds % 60
                    print(f"    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(dur_hours)} —á. {int(dur_minutes)} –º–∏–Ω. {int(dur_seconds)} —Å–µ–∫.")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π
                entries = data.get('entries', [])
                print(f"- –ó–∞–ø–∏—Å–∏: {len(entries)}")
                for i, entry in enumerate(entries[:3]):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                    status = entry.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    start = entry.get('start_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                    end = entry.get('end_time') or '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
                    total_paused = entry.get('total_paused', 0)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if entry.get('end_time'):
                        start_time = datetime.fromisoformat(start.replace('Z', '+00:00'))
                        end_time = datetime.fromisoformat(end.replace('Z', '+00:00'))
                        duration_seconds = (end_time - start_time).total_seconds() - float(total_paused)
                        hours = duration_seconds // 3600
                        minutes = (duration_seconds % 3600) // 60
                        seconds = duration_seconds % 60
                        duration_str = f"{int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫."
                    else:
                        duration_str = "–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"
                    
                    print(f"  * –ó–∞–ø–∏—Å—å {i+1}: —Å—Ç–∞—Ç—É—Å={status}, –Ω–∞—á–∞–ª–æ={start}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ={end}")
                    print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}, –ü–∞—É–∑–∞: {total_paused} —Å–µ–∫.")
                
                return data
            except json.JSONDecodeError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {response.text[:200]}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            print(response.text)
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏
    time_status = check_time_status(TOKEN)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_stats = check_stats(TOKEN)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    one_year_ago = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
    today = datetime.now().strftime("%Y-%m-%d")
    yearly_stats = check_stats(TOKEN, one_year_ago, today)
    
    print("\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 