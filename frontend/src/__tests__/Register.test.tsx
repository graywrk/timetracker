import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { act } from 'react';
import { BrowserRouter } from 'react-router-dom';
import Register from '../components/Auth/Register';
import { AuthProvider } from '../context/AuthContext';
import * as authApi from '../api/auth';

// –ú–æ–∫–∞–µ–º API-—Ñ—É–Ω–∫—Ü–∏–∏
jest.mock('../api/auth', () => ({
  login: jest.fn(),
  register: jest.fn(),
  logout: jest.fn(),
  getCurrentUser: jest.fn()
}));

// –ú–æ–∫–∞–µ–º useNavigate –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => jest.fn(),
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ localStorage mock
const localStorageMock = (() => {
  let store: Record<string, string> = {};
  return {
    getItem: jest.fn((key: string) => store[key] || null),
    setItem: jest.fn((key: string, value: string) => { store[key] = value; }),
    removeItem: jest.fn((key: string) => { delete store[key]; }),
    clear: jest.fn(() => { store = {}; })
  };
})();

Object.defineProperty(window, 'localStorage', { value: localStorageMock });

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
const renderWithProviders = (ui: React.ReactElement) => {
  return render(
    <BrowserRouter>
      <AuthProvider>
        {ui}
      </AuthProvider>
    </BrowserRouter>
  );
};

// –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const createTestJWT = () => {
  return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE3NDIyMTQ3OTJ9.test_signature";
};

describe('Register Component', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –∏ localStorage –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks();
    localStorageMock.clear();
  });

  test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    renderWithProviders(<Register />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    expect(screen.getByText('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')).toBeInTheDocument();
    expect(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')).toBeInTheDocument();
    expect(screen.getByLabelText('–ü–∞—Ä–æ–ª—å')).toBeInTheDocument();
    expect(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' })).toBeInTheDocument();
    expect(screen.getByText(/–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç/i)).toBeInTheDocument();
  });

  test('–ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', async () => {
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
    const mockToken = createTestJWT();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
    const mockRegisterResponse = {
      token: mockToken,
      user: { id: 1, email: 'new@example.com' }
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let resolveRegister: (value: any) => void;
    const registerPromise = new Promise((resolve) => {
      resolveRegister = resolve;
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    (authApi.register as jest.Mock).mockImplementation(() => registerPromise);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    await act(async () => {
      renderWithProviders(<Register />);
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.change(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'), { 
        target: { value: 'new@example.com' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), { 
        target: { value: 'password123' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'), { 
        target: { value: 'password123' } 
      });
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }));
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–º–∏—Å–∞
      await new Promise(resolve => setTimeout(resolve, 10));
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–∏—Å
      resolveRegister!(mockRegisterResponse);
      // –ñ–¥–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 10));
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(authApi.register).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    expect(localStorageMock.setItem).toHaveBeenCalledWith('token', mockToken);
    expect(localStorageMock.setItem).toHaveBeenCalledWith(
      'user', 
      JSON.stringify(mockRegisterResponse.user)
    );
  });
  
  test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—à–∏–±–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.';
    
    let rejectRegister: (error: any) => void;
    const registerPromise = new Promise((_, reject) => {
      rejectRegister = reject;
    });
    
    (authApi.register as jest.Mock).mockImplementation(() => registerPromise);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    await act(async () => {
      renderWithProviders(<Register />);
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.change(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'), { 
        target: { value: 'existing@example.com' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), { 
        target: { value: 'password123' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'), { 
        target: { value: 'password123' } 
      });
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }));
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–º–∏—Å–∞
      await new Promise(resolve => setTimeout(resolve, 10));
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å —Å –æ—à–∏–±–∫–æ–π
      rejectRegister!(new Error(errorMessage));
      // –ñ–¥–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 10));
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(authApi.register).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(screen.getByText(errorMessage)).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ localStorage –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    expect(localStorageMock.setItem).not.toHaveBeenCalledWith('token', expect.any(String));
    expect(localStorageMock.setItem).not.toHaveBeenCalledWith('user', expect.any(String));
  });
  
  test('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É', () => {
    renderWithProviders(<Register />);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const passwordInput = screen.getByLabelText('–ü–∞—Ä–æ–ª—å');
    const toggleButton = screen.getByRole('button', { name: /üëÅÔ∏è‚Äçüó®Ô∏è/ });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç)
    expect(passwordInput).toHaveAttribute('type', 'password');
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏
    fireEvent.click(toggleButton);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º
    expect(passwordInput).toHaveAttribute('type', 'text');
    
    // –ù–∞–∂–∏–º–∞–µ–º –µ—â–µ —Ä–∞–∑ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
    fireEvent.click(screen.getByRole('button', { name: /üëÅÔ∏è/ }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞ —Å–∫—Ä—ã—Ç
    expect(passwordInput).toHaveAttribute('type', 'password');
  });
  
  test('–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π', async () => {
    await act(async () => {
      renderWithProviders(<Register />);
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º Email –∏ –ø–∞—Ä–æ–ª—å
    await act(async () => {
      fireEvent.change(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'), { 
        target: { value: 'test@example.com' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), { 
        target: { value: 'password123' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'), { 
        target: { value: 'different_password' } 
      });
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }));
    });
    
    // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    expect(screen.getByText('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(authApi.register).not.toHaveBeenCalled();
  });
  
  test('–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è', async () => {
    await act(async () => {
      renderWithProviders(<Register />);
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º Email –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
    await act(async () => {
      fireEvent.change(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'), { 
        target: { value: 'test@example.com' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), { 
        target: { value: '123' } 
      });
      
      fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'), { 
        target: { value: '123' } 
      });
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    await act(async () => {
      fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }));
    });
    
    // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    expect(screen.getByText('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(authApi.register).not.toHaveBeenCalled();
  });
  
  test('–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç Email', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤ API
    (authApi.register as jest.Mock).mockResolvedValue({
      token: createTestJWT(),
      user: { id: 1, email: 'invalid-email' }
    });
    
    renderWithProviders(<Register />);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email
    fireEvent.change(screen.getByLabelText('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'), { 
      target: { value: 'invalid-email' } 
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    fireEvent.change(screen.getByLabelText('–ü–∞—Ä–æ–ª—å'), { 
      target: { value: 'password123' } 
    });
    
    fireEvent.change(screen.getByLabelText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'), { 
      target: { value: 'password123' } 
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    fireEvent.click(screen.getByRole('button', { name: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –∏–∑-–∑–∞ HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–æ –≤ —Ç–µ—Å—Ç–∞—Ö —ç—Ç–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    // –ü–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ API –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(authApi.register).toHaveBeenCalled();
  });
}); 